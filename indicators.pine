//@version=5
indicator('Combined Candlestick Pattern Identifier', overlay=true)

// Input parameters for customization
// Define input for maximum allowed real body percentage
realBodyMax = input.float(0.3, title='Max Real Body (%)', minval=0.0, maxval=1.0)

// Define input for minimum upper wick to body ratio
upperShadowMinRatio = input.float(2.0, title='Min Upper Wick to Body Ratio', minval=1.0)

// Define input for maximum allowed lower shadow percentage
lowerShadowMax = input.float(0.15, title='Max Lower Shadow (%)', minval=0.0, maxval=1.0)

// Define input for minimum high to close ratio
highToCloseMinRatio = input.float(2.0, title='High to Close Min Ratio', minval=1.0)

// Define input for long upper wick multiplier
long_upper_wick_multiplier = input.float(2.0, title='Long Upper Wick Multiplier', tooltip='Multiplier for body to upper wick ratio')

// Define input for Shooting Star marker color
color_shooting_star = input.color(color.red, title='Shooting Star Marker Color')

// Define input for long lower wick multiplier
long_lower_wick_multiplier = input.float(2.0, title='Long Lower Wick Multiplier', tooltip='Multiplier for body to lower wick ratio')

// Define input for Hammer marker color
color_hammer = input.color(color.green, title='Hammer Marker Color')

// Calculating candle parts
// Calculate total range of the candle
candleRange = high - low

// Calculate the real body size of the candle
realBody = math.abs(close - open)

// Calculate the upper shadow of the candle
upperShadow = high - math.max(open, close)

// Calculate the lower shadow of the candle
lowerShadow = math.min(open, close) - low

// Conditions for inverted hammer
// Define condition for the previous two candles being negative (red)
redCandles = (close[1] < open[1] and close[2] < open[2])

// Define conditions for detecting an Inverted Hammer pattern
detectInvertedHammer = realBody / candleRange < realBodyMax and upperShadow / realBody > upperShadowMinRatio and lowerShadow / candleRange < lowerShadowMax and (high - close) / realBody > highToCloseMinRatio and redCandles and close > open

// Define Shooting Star condition
// Define condition for a simple uptrend
is_uptrend = close > close[1] and close[1] > close[2]

// Define conditions for detecting a Shooting Star pattern
is_shooting_star = realBody / candleRange < realBodyMax and upperShadow > (long_upper_wick_multiplier * realBody) and lowerShadow / candleRange < lowerShadowMax and close < open and is_uptrend

// Define Hammer condition
// Define conditions for detecting a Hammer pattern
is_hammer = (close > open and lowerShadow > (long_lower_wick_multiplier * realBody) and upperShadow < realBody and (realBody / candleRange) >= 0.2)

// Plotting Shooting Star marker
// Plot marker for Shooting Star pattern
plotshape(is_shooting_star, title='Shooting Star', location=location.abovebar, color=color_shooting_star, style=shape.labelup, size=size.small, text='Shooting Star')

// Plotting Hammer marker
// Plot marker for Hammer pattern
plotshape(is_hammer, title='Hammer', location=location.belowbar, color=color_hammer, style=shape.labeldown, size=size.small, text='Hammer')

// Plotting the inverted hammer signals
// Plot marker for Inverted Hammer pattern
plotshape(detectInvertedHammer, title='Inverted Hammer', location=location.belowbar, color=color.green, style=shape.labelup, text='InvHammer')
